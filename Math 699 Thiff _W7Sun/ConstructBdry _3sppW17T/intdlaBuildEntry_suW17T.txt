% algr 1: Build Entire Boundary 

function [varargout] = intdlaBuildEntBdy_suW17T(Npart)
%INTDLA   Simulate internal diffusion-limited aggregation.
%   INTDLA(N) simulates an internal DLA process with N particles.
%   (If unspecified N defaults to 10000.)
%
%   G = INTDLA(N) also returns the final occupation grid.

if nargin < 1
  Npart = 10000;                % number of particles
end
drift = [0 0];
% Need to change grid boundaries if there's a drift.
% Find an empirical formula first.
Ngrid = ceil(1.2*sqrt(Npart));  % size of grid quadrant
grid0 = Ngrid+1;                % center of grid
grid = zeros(2*Ngrid+1);
x = -Ngrid:Ngrid;

rng('default')


v_dir = [1 0; 0 1; -1 0; 0 -1];
n_dir = 4;

for i = 1:Npart
  X = [0 0];
  while 1
    
    d = randi(n_dir);
    
    X(1) = X(1) + v_dir(d, 1) + drift(1);
    X(2) = X(2) + v_dir(d, 2) + drift(2);
    
    % record the number of steps each particles takes before it reaches an
    % empty sopt, and store in a vector.  
    
    
    if X(1)+grid0 > 2*Ngrid
        xPos = 2*Ngrid;
    else
        xPos = X(1)+grid0; 
    end
    
    if X(2)+grid0 > 2*Ngrid
        yPos = 2*Ngrid;
    else
        yPos = X(2)+grid0;
    end
    
    
    if ~grid(yPos,xPos)
      grid(yPos,xPos) = 1;
      break
    end
    
  end

  % algr 1: Build Entire Boundary  

  grid_bdy = zeros(size(grid));
  y_bd = grid0;
  x_bd = 0; 
  finish1 = 0;
  
  % find the first boundary point 
  for kk = 0:(grid0-1)
      x_loc = grid0 + kk; 
      
      if (grid(y_bd, x_loc) == 0 && finish1 == 0)
          finish1 = 1; 
          x_bd = x_loc - 1;
      end 
  end
  
  finish2 = 0;
  
  % find the second boundary point of the neighbors of the first one 
  while finish2 == 0
      neighb = [y_bd+1 x_bd; y_bd-1 x_bd; y_bd x_bd+1; y_bd x_bd-1; y_bd+1 x_bd+1; y_bd+1 x_bd-1; y_bd-1 x_bd+1; y_bd-1 x_bd-1];
       
      finish2 = 1;
      
      for ll = 1:8
          if (grid(neighb(ll,1), neighb(ll,2))==1) && (grid_bdy(neighb(ll,1), neighb(ll,2))==0)
              if ~((grid(neighb(ll,1)+1, neighb(ll,2))==1) && (grid(neighb(ll,1)-1, neighb(ll,2))==1) && (grid(neighb(ll,1), neighb(ll,2)+1)==1) && (grid(neighb(ll,1), neighb(ll,2)-1)==1))
              
                  grid_bdy(neighb(ll,1), neighb(ll,2)) = 1;  
                  finish2 = 0; 
                  y_bd = neighb(ll,1);
                  x_bd = neighb(ll,2);
                  
                  y_bd2 = neighb(ll,1);
                  x_bd2 = neighb(ll,2);
                  
                  while finish1==0
                    neighb2 = [y_bd2+1 x_bd2; y_bd2-1 x_bd2; y_bd2 x_bd2+1; y_bd2 x_bd2-1; y_bd2+1 x_bd2+1; y_bd2+1 x_bd2-1; y_bd2-1 x_bd2+1; y_bd2-1 x_bd2-1];
         
                    finish1 = 1;
                    
                    for ii=1:8
                        if (grid(neighb2(ii,1), neighb2(ii,2))==1) && (grid_bdy(neighb2(ii,1), neighb2(ii,2))==0)
                            if ~((grid(neighb2(ii,1)+1, neighb2(ii,2))==1) && (grid(neighb2(ii,1)-1, neighb2(ii,2))==1) && (grid(neighb2(ii,1), neighb2(ii,2)+1)==1) && (grid(neighb2(ii,1), neighb2(ii,2)-1)==1))
                                
                                grid_bdy(neighb2(ii,1), neighb2(ii,2)) = 1;  
                                finish1 = 0; 
                                y_bd2 = neighb2(ii,1);
                                x_bd2 = neighb2(ii,2);
                            end 
                        end 
                    end 
                    
                    
                  end 
              
              end 
              
          end
 
      end 
          
  end 
      

          

  if ~mod(i,100)
    fprintf('particle %g\n',i)
    plotgrid(x,grid_bdy)
    drawnow
  end
  
  
end

plotgrid(x,grid_bdy)

if nargout > 0
  varargout{1} = grid;
end
            


%==========================================================================
function plotgrid(x,grid_bdy)

imagesc(x,x,grid_bdy.'), axis square, axis xy
xlabel('x'), ylabel('y')
